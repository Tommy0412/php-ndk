name: Build PHP NDK Artifacts

on:
  push:
    tags:
      - 'v*.*.*'  # Trigger on version tags like v1.0.0

jobs:
  build_and_package:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        architecture:
          - abi: "armeabi-v7a"
            target: "armv7a-linux-androideabi32"
          - abi: "arm64-v8a"
            target: "aarch64-linux-android"

    steps:
      # Checkout the repository
      - name: Checkout Code
        uses: actions/checkout@v4

      # Build PHP & SQLite for the target ABI
      - name: Build PHP for ${{ matrix.architecture.abi }}
        run: |
          docker build \
            --build-arg TARGET=${{ matrix.architecture.target }} \
            --build-arg PHP_VERSION=8.4.2 \
            --target buildsystem \
            --tag php-ndk-builder:${{ matrix.architecture.abi }} .

      # Create release-package directory structure
      - name: Prepare Artifact Directory
        run: |
          mkdir -p release-package/binaries/${{ matrix.architecture.abi }}
          if [ "${{ matrix.architecture.abi }}" == "armeabi-v7a" ]; then
            mkdir -p release-package/includes/php
          fi

      # Extract compiled binaries and headers
      - name: Extract Binaries and Headers
        run: |
          CONTAINER=$(docker create php-ndk-builder:${{ matrix.architecture.abi }})
          docker cp $CONTAINER:/root/build/install/. ./release-package/binaries/${{ matrix.architecture.abi }}
          if [ "${{ matrix.architecture.abi }}" == "armeabi-v7a" ]; then
            docker cp $CONTAINER:/root/build/install/php-headers/. ./release-package/includes/php
          fi
          docker rm $CONTAINER

      # Upload the artifacts for this ABI
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: php-ndk-${{ matrix.architecture.abi }}
          path: release-package/binaries/${{ matrix.architecture.abi }}

  final_release:
    needs: build_and_package
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      # Download both ABI artifacts
      - name: Download ABI Artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./release-package/binaries

      # Create final structure for distribution
      - name: Prepare Final Directory
        run: |
          mkdir -p php-ndk-artifacts/lib/armeabi-v7a
          mkdir -p php-ndk-artifacts/lib/arm64-v8a
          mkdir -p php-ndk-artifacts/include
          
          # Move downloaded binaries to final lib folders
          mv ./release-package/binaries/armeabi-v7a/* ./php-ndk-artifacts/lib/armeabi-v7a/
          mv ./release-package/binaries/arm64-v8a/* ./php-ndk-artifacts/lib/arm64-v8a/
          
          # Rename php.so to libphp_sapi.so
          mv php-ndk-artifacts/lib/armeabi-v7a/php.so php-ndk-artifacts/lib/armeabi-v7a/libphp_sapi.so
          mv php-ndk-artifacts/lib/arm64-v8a/php.so php-ndk-artifacts/lib/arm64-v8a/libphp_sapi.so

      # Copy headers from first ABI (they are identical)
      - name: Copy PHP Headers
        run: |
          mkdir -p php-ndk-artifacts/include/php
          docker build --target buildsystem --tag header-extractor --build-arg TARGET="aarch64-linux-android" .
          CONTAINER=$(docker create header-extractor)
          docker cp $CONTAINER:/root/build/install/php-headers/. ./php-ndk-artifacts/include/php
          docker rm $CONTAINER

      # Zip everything for release
      - name: Create ZIP Release Asset
        run: |
          zip -r php-ndk-artifacts.zip php-ndk-artifacts

      # Upload ZIP as GitHub release
      - name: Upload Release Asset
        uses: softprops/action-gh-release@v2
        with:
          files: php-ndk-artifacts.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

name: Build PHP for Android (ARM64)

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Debug Dockerfile args
        run: |
          echo "Dockerfile uses TARGET=armv7a-linux-androideabi32 by default"
          echo "Overriding to aarch64-linux-android for ARM64"

      - name: Build PHP using Dockerfile (ARM64)
        run: |
          echo "Building PHP for Android (ARM64)..."
          docker build \
            --build-arg TARGET=aarch64-linux-android \
            --build-arg LIBDIR=arm64-v8a \
            -t php-ndk-arm64 .
          echo "Build complete. Inspecting container..."

      - name: Debug Container Contents
        run: |
          CONTAINER_ID=$(docker create php-ndk-arm64)
          echo "=== Files in /app/src/main/jniLibs/arm64-v8a ==="
          docker cp "$CONTAINER_ID:/app/src/main/jniLibs/arm64-v8a" ./temp_debug
          ls -la ./temp_debug
          rm -rf ./temp_debug
          docker rm "$CONTAINER_ID"

      - name: Extract .so Files
        run: |
          CONTAINER_ID=$(docker create php-ndk-arm64)
          mkdir -p ./install/jniLibs/arm64-v8a
          docker cp "$CONTAINER_ID:/app/src/main/jniLibs/arm64-v8a/." ./install/jniLibs/arm64-v8a/
          docker rm "$CONTAINER_ID"
          echo "=== Extracted files ==="
          ls -la ./install/jniLibs/arm64-v8a/
          if [ -z "$(ls -A ./install/jniLibs/arm64-v8a/)" ]; then
            echo "‚ùå ERROR: No .so files found!"
            exit 1
          fi

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: php-android-arm64
          path: ./install/jniLibs/arm64-v8a/
          retention-days: 7

      - name: Create Release ZIP
        run: |
          cd ./install/jniLibs/arm64-v8a/
          zip -r php-android-arm64-${{ github.run_number }}.zip .
          mv php-android-arm64-${{ github.run_number }}.zip ../../../

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ github.run_number }}-arm64
          name: PHP Android ARM64 v${{ github.run_number }}
          body: |
            **PHP ${{ github.sha }}** built for **Android ARM64**.
            
            - **php.so**: PHP CLI binary
            - **libsqlite3.so**: SQLite library
            - Download: `php-android-arm64-${{ github.run_number }}.zip`
            
            [View Artifacts](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          files: |
            php-android-arm64-${{ github.run_number }}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
